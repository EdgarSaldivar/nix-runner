name: 'NixOS Flake Runner'
description: 'Automated CI/CD for NixOS flakes with dynamic service testing'
author: 'nix-runner'
branding:
  icon: 'check-circle'
  color: 'blue'

inputs:
  flake-path:
    description: 'Path to the flake.nix file'
    required: false
    default: '.'
  config-file:
    description: 'Path to nix-runner configuration file'
    required: false
    default: '.nix-runner.yaml'
  test-timeout:
    description: 'Timeout for tests in seconds'
    required: false
    default: '300'
  skip-deployment:
    description: 'Skip actual deployment and only run build tests'
    required: false
    default: 'false'
  target-host:
    description: 'Target host for deployment testing (optional)'
    required: false
    default: ''
  ssh-key:
    description: 'SSH private key for deployment testing'
    required: false
    default: ''

outputs:
  result:
    description: 'Test result summary'
  services-detected:
    description: 'List of detected services'
  test-report:
    description: 'Detailed test report'

runs:
  using: 'composite'
  steps:
    - name: Setup Nix
      uses: cachix/install-nix-action@v22
      with:
        nix_path: nixpkgs=channel:nixos-unstable

    - name: Setup Nix Runner
      shell: bash
      run: |
        echo "${{ github.action_path }}/scripts" >> $GITHUB_PATH
        chmod +x ${{ github.action_path }}/scripts/*

    - name: Parse Flake Configuration
      shell: bash
      run: |
        echo "::group::Parsing flake configuration"
        parse-flake.sh "${{ inputs.flake-path }}" "${{ inputs.config-file }}"
        echo "::endgroup::"

    - name: Run Build Tests
      shell: bash
      run: |
        echo "::group::Running build tests"
        build-test.sh "${{ inputs.flake-path }}"
        echo "::endgroup::"

    - name: Deploy and Test Services
      if: inputs.skip-deployment != 'true'
      shell: bash
      run: |
        echo "::group::Deploying and testing services"
        deploy-test.sh "${{ inputs.flake-path }}" "${{ inputs.target-host }}" "${{ inputs.ssh-key }}" "${{ inputs.test-timeout }}"
        echo "::endgroup::"

    - name: Generate Report
      shell: bash
      run: |
        echo "::group::Generating test report"
        generate-report.sh
        echo "::endgroup::"